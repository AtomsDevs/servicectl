#!/bin/sh
# Control services for system based on Systemd inside chroot and SysVinit outside chroot
# https://github.com/smaknsk/servicectl
#

# Pach systemd services file
SYSTEMD_UNITS_PATH="/usr/lib/systemd/system/"

# Path locate this script
DIR=$(dirname "$(readlink -f "$0")")

# Path contents symlink on systemd units files
SERVICECTL_ENABLED_PATH="$DIR/enabled/"

# Check is root
if [ "$(id -u)" -ne 0 ]; then
  echo "You must run as root user" 2>&1
  exit 1
fi

# Parse ini file. usage: parse $inifile $section $key
# Return 0 on success, 1 if file cannot be opened, 2 if the given key cannot be found in the given section
parse()
{
    _inifile="$1"
    _section="$2"
    _key="$3"

    # if [ ! -r "$_inifile" ]
    # then
    #     echo "parse: cannot read file '$_inifile'"
    #     exit 1;
    # fi

   exec < "$_inifile"

   while read -r section; do
     if [ "$section" = '['"$_section"']' ] ; then
       IFS='='
       while read -r key value; do
         # check if we are still within our section
        if [ "$key" = '['"$_section"']' ] ; then
            echo "parse: key '$_key' not found in section '$_section'"
            exit 2;
         fi
         # strip leading and trailing whitespace from keys
         key=$(printf "%s" "$key" | sed 's/^\s*//;s/\s*$//')
         _key=$(printf "%s" "$_key" | sed 's/^\s*//;s/\s*$//')
         if [ "$key" = "$_key" ]; then
           echo "$value"
           exit 0;
         fi
      done
    fi
  done
  exit 2;
}

# Execute action from systemd service file
exec_action() {
    action="$1"
    service="$2"
    file="${SYSTEMD_UNITS_PATH}${service}.service"
    is_required=1 # by default turn action is required
    cmd=""
        
    # if passed arg $3 then set value
    if [ -n "$3" ]; then
        is_required="$3"
    fi

    cmd=$(parse "$file" Service "$action")
    ret=$?    
    if [ $ret = 1 ]; then
        echo "Error: file $file cannot be opened"
        return 1
    fi
    if [ $ret = 2 ]; then
        # if action required, return error
        if [ "$is_required" = 1 ]; then
            echo "Error: action $action not found in file $file"
            return 1
        fi
        
        return 0        
    fi
  
    eval "$cmd"
    return $?
}

exec_if_exists() {
    exec_action "$@" 0
}

exec_stop() {
    service="$1"
    file="${SYSTEMD_UNITS_PATH}${service}.service"
    cmd=""
    
    cmd=$(parse "$file" Service ExecStop)
    ret=$?
    
    # if ExecStop exists
    if [ $ret = 0 ]; then
        exec_action ExecStop "$service"
        return $?
    fi
    
    # get path pid file
    pid_file=$(parse "$file" Service PIDFile)
    ret=$?
    if [ $ret != 0 ]; then
        echo "Error: attribute PIDFile not exists in file $file"
        return 1
    fi

    read -r PID < "$pid_file"
    kill -TERM "$PID" || echo "Couldn't kill PID"
}

if [ $# -lt 2 ]; then
    echo "Usage: $0 <action> <service> [<is_required>]"
    exit 1
fi

# Switch action
case "$1" in
    start)
		i=0;
        for service in "$@";
        do
			if [ "$i" -ne "1" ]; then 
				i=$((i+1))
				continue;
			fi
            service=${service%".service"}
            if exec_if_exists ExecStartPre "$service"; then
                exec_action ExecStart "$service"
            fi
        done
    ;;
    
    stop)
		i=0;
        for service in "$@";
        do
			if [ "$i" -ne "1" ]; then 
				i=$((i+1))
				continue;
			fi
            service=${service%".service"}
            exec_stop "$service"
        done
    ;;
    
    restart)
		i=0;
        for service in "$@";
        do
			if [ "$i" -ne "1" ]; then 
				i=$((i+1))
				continue;
			fi
            service=${service%".service"}
            exec_stop "$service"
            exec_action ExecStart "$service"
        done
    ;;
    
    reload)
		i=0;
        for service in "$@";
        do
			if [ "$i" -ne "1" ]; then 
				i=$((i+1))
				continue;
			fi
            service=${service%".service"}
            exec_action ExecReload "$service"
        done
    ;;

    enable)
		i=0;
        for service in "$@";
        do
			if [ "$i" -ne "1" ]; then 
				i=$((i+1))
				continue;
			fi
            service=${service%".service"}
            file="${SYSTEMD_UNITS_PATH}${service}.service"
            enabled_symlink="${SERVICECTL_ENABLED_PATH}${service}.service"

            if [ ! -f "$file" ]; then
                echo "Error: file $file is not exists"
                continue
            fi

            if [ -f "$enabled_symlink" ]; then
                echo "${service} already enabled"
                continue
            fi

            echo "ln -s \"$file\" \"$enabled_symlink\""
            ln -s "$file" "$enabled_symlink"
        done
    ;;

    disable)
		i=0;
        for service in "$@"; 
        do
			if [ "$i" -ne "1" ]; then 
				i=$((i+1))
				continue;
			fi
            service=${service%".service"}
            file="${SERVICECTL_ENABLED_PATH}${service}.service"
            if [ ! -f "$file" ]; then
                echo "Error: file $file is not exists"
                continue
            fi
            
            echo "rm $file"
            rm "$file"
        done
    ;;
    
    *)
        echo "Availble action: start, stop, restart, reload, enable or disable"
        exit 1
    ;;
esac